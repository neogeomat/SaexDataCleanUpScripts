# -*- coding: utf-8 -*-
# ---------------------------------------------------------------------------
# 17a_merge_dummy_planning.py
# Created on: 2020-11-02 16:28:29.00000
#   (generated by ArcGIS/ModelBuilder)
# Description: 
# ---------------------------------------------------------------------------
from Tkinter import *
from tkMessageBox import showerror


class App(Frame):
    def __init__(self, master):
        Frame.__init__(self, master)
        self.pack()

        self.grid()
        self.create_widgets()

    def create_widgets(self):
        """Create buttons that do nothing"""

        # create label for sheet
        self.Sheet = Label(self, text="Enter path to the main folder", width=30)
        self.Sheet.grid(row=0, column=0, sticky=E + W + N + S)

        # create entry.
        self.sheetentry1 = Entry(self, width=30)
        self.sheetentry1.grid(row=0, column=1, sticky=E + W + N + S)

        # create calculate button
        self.button4 = Button(self, text="Process", command=self.parcelIDcreator, width=30)
        self.button4.grid(row=1, column=1, sticky=E + W + N + S)

    def parcelIDcreator(self):
        import tkMessageBox
        import arcpy
        import glob
        import os
        import shutil
        from arcpy import env
        path = self.sheetentry1.get()
        # print(path)
        if os.path.exists(path + "\\" + path.split("\\")[-1] + "_merged.mdb"):
            os.remove(path + "\\" + path.split("\\")[-1] + "_merged.mdb")
            print("old merged file deleted")
        # mdb_list = glob.glob(path+"\**\*.mdb")
        # mdb_list.extend(glob.glob(path+"\*.mdb"))

        mdb_list = []
        for root, dirnames, filenames in os.walk(path):
            for filename in filenames:
                if filename.endswith('.mdb'):
                    mdb_list.append(os.path.join(root, filename))

        print(mdb_list)
        # Import arcpy module
        import arcpy
        import os
        import shutil

        for i in mdb_list:
            env.workspace = i
            print (env.workspace)

            # Local variables:
            # Local variables:
            Folder_Location = "d:"
            # Parcel = "Parcel"
            # Data_Location = "D:\\DissolveByParcelKey\\Dahachowk_1Kha.mdb"
            Data_Location = i
            if (os.path.exists("D:\\LIS_SYSTEM\\LIS_Spatial_Data_Templates\\BLANK84.mdb")):
                BLANK84_Template = "D:\\LIS_SYSTEM\\LIS_Spatial_Data_Templates\\BLANK84.mdb"
            else:
                print("Blank Template database not found, install saex")
                exit()
            # Process: Create Temp Folder to strore all processing intermediaries
            DataCleanTemp = Folder_Location + "\\DataCleanTemp"
            if (os.path.exists(DataCleanTemp)): # delete folder if exits, otherwise it causes error
                arcpy.Delete_management(DataCleanTemp, "Folder")
            arcpy.CreateFolder_management(Folder_Location, "DataCleanTemp")
            DataCleanTemp = Folder_Location + "\\DataCleanTemp"
            file_id = i[-12:-4]
            arcpy.CreateFolder_management(DataCleanTemp, file_id)
            DataCleanTemp = DataCleanTemp + "\\" + file_id
            arcpy.env.workspace = DataCleanTemp

            # Generate parcelkey in mdb
            arcpy.CalculateField_management(Data_Location + "\\Parcel", "PARCELKEY","str( !GRIDS1!).ljust(9,'a') + str( !PARCELNO!).zfill(6) + str( !DISTRICT!).zfill(2) + str( !VDC! ).zfill(4) + str( !WARDNO!).zfill(2)","PYTHON_9.3", "")

            arcpy.FeatureClassToFeatureClass_conversion(Data_Location + "\\Parcel", DataCleanTemp, "Parcel.shp", "", "PARCELKEY \"PARCELKEY\" true true false 23 Text 0 0 ,First,#," + Data_Location + "\\Parcel,PARCELKEY,-1,-1;PARCELNO \"PARCELNO\" true true false 4 Long 0 0 ,First,#," + Data_Location + "\\Parcel,PARCELNO,-1,-1;DISTRICT \"DISTRICT\" true true false 2 Short 0 0 ,First,#," + Data_Location + "\\Parcel,DISTRICT,-1,-1;VDC \"VDC\" true true false 2 Short 0 0 ,First,#," + Data_Location + "\\Parcel,VDC,-1,-1;WARDNO \"WARDNO\" true true false 3 Text 0 0 ,First,#," + Data_Location + "\\Parcel,WARDNO,-1,-1;GRIDS1 \"GRIDS1\" true true false 9 Text 0 0 ,First,#," + Data_Location + "\\Parcel,GRIDS1,-1,-1;PARCELTY \"PARCELTY\" true true false 2 Short 0 0 ,First,#," + Data_Location + "\\Parcel,PARCELTY,-1,-1;ParcelNote \"ParcelNote\" true false false 200 Text 0 0 ,First,#," + Data_Location + "\\Parcel,ParcelNote,-1,-1;Shape_Leng \"Shape_Length\" false true true 8 Double 0 0 ,First,#," + Data_Location + "\\Parcel,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0 ,First,#," + Data_Location + "\\Parcel,Shape_Area,-1,-1", "")

            Parcel = DataCleanTemp + "\\Parcel.shp"
            # Process: Feature To Point
            arcpy.FeatureToPoint_management(Parcel, DataCleanTemp + "\\ParcelCentroid.shp", "INSIDE")

            # Process: Select Layer By Attribute
            temp = "temp" + file_id
            arcpy.MakeFeatureLayer_management(Parcel, temp)
            arcpy.SelectLayerByAttribute_management(temp, 'NEW_SELECTION', 'PARCELNO < 9000 AND PARCELNO <> 0')

            # arcpy.SelectLayerByAttribute_management("tempInvert", "SWITCH_SELECTION")
            # Process: Dissolve
            arcpy.Dissolve_management(temp, DataCleanTemp + "\\ParcelDissolve.shp", "PARCELNO;DISTRICT;VDC;WARDNO;GRIDS1", "", "SINGLE_PART", "DISSOLVE_LINES")
            arcpy.MakeFeatureLayer_management(Parcel, temp +"invert","PARCELNO >= 9000 OR PARCELNO = 0")
            arcpy.SelectLayerByAttribute_management(temp + "invert", "NEW_SELECTION", "PARCELNO >= 9000 OR PARCELNO = 0")
            arcpy.CopyFeatures_management(temp + "invert", DataCleanTemp + "\\ParcelRemain.shp")

            # Join management
            arcpy.SpatialJoin_analysis(DataCleanTemp + "\\ParcelDissolve.shp", DataCleanTemp + "\\ParcelCentroid.shp", DataCleanTemp + "\\NewJoinedData.shp", "JOIN_ONE_TO_ONE", "KEEP_ALL","PARCELNO \"PARCELNO\" true true false 10 Long 0 10 ,First,#," + DataCleanTemp + "\\ParcelDissolve.shp,PARCELNO,-1,-1;DISTRICT \"DISTRICT\" true true false 10 Long 0 10 ,First,#," + DataCleanTemp + "\\ParcelDissolve.shp,DISTRICT,-1,-1;VDC \"VDC\" true true false 10 Long 0 10 ,First,#," + DataCleanTemp + "\\ParcelDissolve.shp,VDC,-1,-1;WARDNO \"WARDNO\" true true false 3 Text 0 0 ,First,#," + DataCleanTemp + "\\ParcelDissolve.shp,WARDNO,-1,-1;GRIDS1 \"GRIDS1\" true true false 9 Text 0 0 ,First,#," + DataCleanTemp + "\\ParcelDissolve.shp,GRIDS1,-1,-1;PARCELKEY \"PARCELKEY\" true true false 23 Text 0 0 ,First,#," + DataCleanTemp + "\\ParcelCentroid.shp,PARCELKEY,-1,-1;PARCELTY \"PARCELTY\" true true false 10 Long 0 10 ,First,#," + DataCleanTemp + "\\ParcelCentroid,shp,PARCELTY,-1,-1;ParcelNote \"ParcelNote\" true true false 200 Text 0 0 ,First,#," + DataCleanTemp + "\\ParcelCentroid.shp,ParcelNote,-1,-1", "CONTAINS", "", "")

            arcpy.Delete_management(Data_Location + "\\Parcel")
            # Process: Copy Features
            arcpy.CopyFeatures_management(BLANK84_Template + "\\Parcel", Data_Location + "\\Parcel", "", "0", "0", "0")
            arcpy.Append_management(DataCleanTemp + "\\NewJoinedData.shp", Data_Location + "\\Parcel", "NO_TEST")
            arcpy.Append_management(DataCleanTemp + "\\ParcelRemain.shp", Data_Location + "\\Parcel", "NO_TEST")

        print("process complete")
        tkMessageBox.showinfo(title="Merge DUmmy Parcels Saex Mdb files", message="Done")

root = Tk()
root.title("Merge DUmmy Parcels Saex Mdb files")
myapp = App(root)
myapp.mainloop()
